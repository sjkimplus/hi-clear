name: CI/CD Pipeline
on:
  push:
    branches:
      - dev
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ap-northeast-2

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant Execute Permission for Gradle Wrapper
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: hi-clear
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create task definition file from secret
        env:
          ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
        run: echo "${ECS_TASK_DEFINITION}" > task-definition.json

      - name: Render ECS Task Definition
        env:
          ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE: ${{ env.ECR_REGISTRY }}/hi-clear:${{ github.sha }}
          CONTAINER_NAME: hi-clear-container
        run: |
          # Update the task definition file with the new image
          jq --arg IMAGE "$IMAGE" --arg CONTAINER_NAME "$CONTAINER_NAME" \
            '(.containerDefinitions[] | select(.name == $CONTAINER_NAME) | .image) |= $IMAGE' \
            task-definition.json > rendered-task-definition.json
      
          # Strip unwanted fields from the task definition JSON
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .tags)' \
            rendered-task-definition.json > final-task-definition.json

      - name: Deploy to ECS
        run: |
          # Register the cleaned task definition and fetch its ARN
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://final-task-definition.json \
            | jq -r '.taskDefinition.taskDefinitionArn')
      
          # Update the ECS service with the new task definition
          aws ecs update-service \
            --cluster hiclear_cluster \
            --service hi-clear-service \
            --task-definition "$NEW_TASK_DEF_ARN"
      
          # Wait for the ECS service to stabilize after the update
          aws ecs wait services-stable \
            --cluster hiclear_cluster \
            --services hi-clear-service
      
          echo "Deployment complete and service is stable."

