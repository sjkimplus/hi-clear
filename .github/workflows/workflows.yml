name: CI/CD Pipeline
on:
  push:
    branches:
      - dev
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: hi-clear-ECR-Log
        env:
          AWS_REGION: ap-northeast-2
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region $AWS_REGION
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 565393063528.dkr.ecr.$AWS_REGION.amazonaws.com

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Grant execute permission to gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build project using Gradle Wrapper
      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: hi-clear-ECR
        env:
          ECR_REGISTRY: 565393063528.dkr.ecr.ap-northeast-2.amazonaws.com
          ECR_REPOSITORY: hi-clear
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Render ECS Task Definition
      - name: Render ECS Task Definition
        id: render_task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ secrets.ECS_TASK_DEFINITION }}
          container-name: hi-clear
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # Deploy to ECS using rendered Task Definition
      - name: hi-clear-ECS Deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          service: hi-clear-service
          cluster: hiclear_cluster
          wait-for-service-stability: true
          task-definition: ${{ steps.render_task.outputs.task-definition }}
